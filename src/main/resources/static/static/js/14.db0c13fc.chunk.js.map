{"version":3,"sources":["components/views/AppList/AppList.js","components/views/AppList/AppListContainer.js","components/views/AppList/index.js"],"names":["AppItem","React","lazy","Promise","all","__webpack_require__","e","then","bind","accordion","props","appsNumber","apps","length","Array","fill","status","AppList","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","toggleAccordion","assertThisInitialized","onEntered","onExited","redirectToAppRegistration","state","tab","map","x","index","setState","onCollapseAction","isOpen","history","push","routes","NEW_APP","path","_this2","react_default","a","createElement","className","Card","CardHeader","Row","Col","xs","Button","color","onClick","CardBody","id","app","idx","key","concat","aria-expanded","aria-controls","src","alt","name","Collapse","data-parent","aria-labelledby","isOpened","Component","defaultProps","withRouter","connect","dispatch","AppListContainer"],"mappings":"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","file":"static/js/14.db0c13fc.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { Button, Card, CardBody, CardHeader, Collapse, Row } from 'reactstrap';\nimport PropTypes from 'prop-types';\nimport Col from 'reactstrap/es/Col';\nimport routes from '../../../navigation/routes';\n\nconst AppItem = React.lazy(() => import('./AppItem'));\n\nconst accordion = (props) => {\n  const appsNumber = props.apps.length;\n  return appsNumber > 1 ? Array(appsNumber).fill(false) : [true];\n};\n\nconst status = (props) => {\n  return Array(props.apps.length).fill(false);\n};\n\nconst propTypes = {\n  apps: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      appId: PropTypes.string.isRequired,\n      appSecret: PropTypes.string.isRequired,\n      description: PropTypes.string,\n    }),\n  ).isRequired,\n};\n\nconst defaultProps = {};\n\nclass AppList extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.toggleAccordion = this.toggleAccordion.bind(this);\n    this.onEntered = this.onEntered.bind(this);\n    this.onExited = this.onExited.bind(this);\n    this.redirectToAppRegistration = this.redirectToAppRegistration.bind(this);\n\n    this.state = {\n      accordion: accordion(props),\n      status: status(props),\n    };\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (state.accordion.length !== props.apps.length || state.status.length !== props.apps.length) {\n      return {\n        accordion: accordion(props),\n        status: status(props),\n      };\n    }\n\n    return null;\n  }\n\n  toggleAccordion(tab) {\n    const prevState = this.state.accordion;\n    const state = prevState.map((x, index) => tab === index ? !x : x);\n\n    this.setState({\n      accordion: state,\n    });\n  }\n\n  onEntered(tab) {\n    this.onCollapseAction(tab, true);\n  }\n\n  onExited(tab) {\n    this.onCollapseAction(tab, false);\n  }\n\n  onCollapseAction(tab, isOpen) {\n    const prevState = this.state.status;\n    const state = prevState.map((x, index) => tab === index ? isOpen : x);\n\n    this.setState({\n      status: state,\n    });\n  }\n\n  redirectToAppRegistration() {\n    this.props.history.push(routes.NEW_APP.path);\n  }\n\n  render() {\n    return (\n      <div className=\"animated fadeIn\">\n        <Card>\n          <CardHeader>\n            <Row className=\"d-flex align-items-center\">\n              <Col xs=\"6\">\n                <i className=\"icon-list\"></i> Registered Apps\n              </Col>\n              <Col xs=\"6\" className=\"d-flex justify-content-end\">\n                <Button color=\"ghost-primary\" onClick={this.redirectToAppRegistration}>Add New</Button>\n              </Col>\n            </Row>\n          </CardHeader>\n          <CardBody>\n            <div id=\"accordion\">\n              {this.props.apps.map((app, idx) => {\n                return (\n                  <Card key={idx} className=\"mb-1\">\n                    <CardHeader\n                      id={`heading${idx}`}\n                      className='m-0 cursor-pointer'\n                      onClick={() => this.toggleAccordion(idx)}\n                      aria-expanded={this.state.accordion[idx]}\n                      aria-controls={`collapse${idx}`}>\n                      <img src={'../../assets/img/default_app_icon.png'} className=\"img-circle img-icon\" alt=\"\"/>\n                      <h5 className=\"text-left ml-2 d-inline-block m-0\">{app.name}</h5>\n                    </CardHeader>\n                    <Collapse\n                      isOpen={this.state.accordion[idx]}\n                      onEntered={() => this.onEntered(idx)}\n                      onExited={() => this.onExited(idx)}\n                      data-parent=\"#accordion\"\n                      id={`collapse${idx}`}\n                      aria-labelledby={`heading${idx}`}>\n                      <CardBody>\n                        <AppItem\n                          app={app}\n                          isOpened={this.state.status[idx]}/>\n                      </CardBody>\n                    </Collapse>\n                  </Card>\n                );\n              })}\n            </div>\n          </CardBody>\n        </Card>\n      </div>\n    );\n  }\n}\n\nAppList.propTypes = propTypes;\nAppList.defaultProps = defaultProps;\n\nexport default withRouter(AppList);\n","import { connect } from 'react-redux';\nimport AppList from './AppList';\n\nconst mapStateToProps = (state) => ({\n  apps: state.apps,\n});\n\nconst mapDispatchToProps = (dispatch) => ({});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(AppList);\n","import AppListContainer from './AppListContainer';\n\nexport default AppListContainer;\n"],"sourceRoot":""}