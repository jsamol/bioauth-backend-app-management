{"version":3,"sources":["components/wrappers/AuthenticationProvider/AuthenticationProvider.js","components/wrappers/AuthenticationProvider/AuthenticationProviderContainer.js","components/wrappers/AuthenticationProvider/index.js"],"names":["AuthenticationProvider","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onRequestIntercepted","bind","assertThisInitialized","onRequestErrorIntercepted","onResponseIntercepted","onResponseErrorIntercepted","state","tokenRefreshed","_this2","apiController","registerInterceptor","keycloak","Keycloak","init","onLoad","success","res","setKeycloak","error","console","log","url","config","authenticated","headers","header","AUTHORIZATION","concat","token","method","httpMethod","POST","PUT","XSRF_TOKEN","cookies","get","credentials","response","_this3","status","httpStatus","UNAUTHORIZED","onTokenRefreshError","setState","updateToken","tokenMinValidity","onTokenRefresh","request","unregisterRequest","deleteKeycloak","react_default","a","createElement","children","Component","defaultProps","withCookies","connect","dispatch","AuthorizationProvider","AuthorizationProviderContainer"],"mappings":"mOAmBMA,cAEJ,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,qBAAuBP,EAAKO,qBAAqBC,KAA1BP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KAC5BA,EAAKU,0BAA4BV,EAAKU,0BAA0BF,KAA/BP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KACjCA,EAAKW,sBAAwBX,EAAKW,sBAAsBH,KAA3BP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KAC7BA,EAAKY,2BAA6BZ,EAAKY,2BAA2BJ,KAAhCP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KAElCA,EAAKa,MAAQ,CACXC,gBAAgB,GATDd,mFAaC,IAAAe,EAAAZ,KAClBa,IAAcC,oBACZd,KAAKI,qBACLJ,KAAKO,0BACLP,KAAKQ,sBACLR,KAAKS,4BAGP,IAAMM,EAAWC,IAAS,kBAC1BD,EAASE,KAAK,CAAEC,OAAQ,mBACrBC,QAAQ,SAACC,GACRR,EAAKhB,MAAMyB,YAAYN,KACtBO,MAAM,WAERC,QAAQC,IAAI,wEAIIC,EAAKC,GASxB,OARI1B,KAAKJ,MAAM+B,gBACbD,EAAOE,QAAQC,IAAOC,eAAtB,UAAAC,OAAiD/B,KAAKJ,MAAMmB,SAASiB,QAGnEN,EAAOO,SAAWC,IAAWC,MAAQT,EAAOO,SAAWC,IAAWE,MACpEV,EAAOE,QAAQC,IAAOQ,YAAcrC,KAAKJ,MAAM0C,QAAQC,IAAI,cAC3Db,EAAOc,YAAc,WAEhB,CAACf,EAAKC,qDAGWJ,GACxB,OAAOA,gDAGamB,GAAU,IAAAC,EAAA1C,KAW9B,OAVIyC,EAASE,SAAWC,IAAWC,cAAiB7C,KAAKU,MAAMC,eAKpD8B,EAASE,SAAWC,IAAWC,cAAgB7C,KAAKU,MAAMC,eACnEX,KAAK8C,sBACI9C,KAAKU,MAAMC,gBACpBX,KAAK+C,SAAS,CAAEpC,gBAAgB,IAPhCX,KAAKJ,MAAMmB,SACRiC,YAAYC,KACZ9B,QAAQ,SAACC,GAAD,OAASsB,EAAKQ,mBACtB5B,MAAM,SAACA,GAAD,OAAWoB,EAAKI,wBAMpBL,qDAGkBnB,GACzB,OAAOA,2CAIPtB,KAAK+C,SAAS,CAAEpC,gBAAgB,IAChCE,IAAcsC,wDAIdtC,IAAcuC,oBACdpD,KAAK+C,SAAS,CAAEpC,gBAAgB,IAChCX,KAAKJ,MAAMyD,kDAIX,OACEC,EAAAC,EAAAC,cAAA,WACGxD,KAAKJ,MAAM6D,iBAjFiBC,aAwFrC/D,EAAuBgE,aA1FF,GA4FNC,kBAAYjE,GC/FZkE,cAVS,SAACnD,GAAD,MAAY,CAClCK,SAAUL,EAAMK,SAChBY,cAAkC,OAAnBjB,EAAMK,WAGI,SAAC+C,GAAD,MAAe,CACxCzC,YAAa,SAACN,GAAD,OAAc+C,EAASzC,YAAYN,KAChDsC,eAAgB,kBAAMS,EAAST,kBAGlBQ,CAGbE,GCfaC","file":"static/js/16.1f88cda7.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Keycloak from 'keycloak-js';\nimport apiController from '../../../network';\nimport { header, httpMethod, httpStatus, tokenMinValidity } from '../../../network/ApiConst';\nimport { withCookies } from 'react-cookie';\n\nconst propTypes = {\n  children: PropTypes.any.isRequired,\n\n  setKeycloak: PropTypes.func.isRequired,\n  deleteKeycloak: PropTypes.func.isRequired,\n\n  keycloak: PropTypes.object,\n  authenticated: PropTypes.bool.isRequired,\n};\n\nconst defaultProps = {};\n\nclass AuthenticationProvider extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.onRequestIntercepted = this.onRequestIntercepted.bind(this);\n    this.onRequestErrorIntercepted = this.onRequestErrorIntercepted.bind(this);\n    this.onResponseIntercepted = this.onResponseIntercepted.bind(this);\n    this.onResponseErrorIntercepted = this.onResponseErrorIntercepted.bind(this);\n\n    this.state = {\n      tokenRefreshed: false,\n    };\n  }\n\n  componentDidMount() {\n    apiController.registerInterceptor(\n      this.onRequestIntercepted,\n      this.onRequestErrorIntercepted,\n      this.onResponseIntercepted,\n      this.onResponseErrorIntercepted,\n    );\n\n    const keycloak = Keycloak('/keycloak.json');\n    keycloak.init({ onLoad: 'login-required' })\n      .success((res) => {\n        this.props.setKeycloak(keycloak);\n      }).error(() => {\n        // TODO: Handle error properly\n       console.log('Authentication: error');\n      });\n  }\n\n  onRequestIntercepted(url, config) {\n    if (this.props.authenticated) {\n      config.headers[header.AUTHORIZATION] = `Bearer ${this.props.keycloak.token}`;\n    }\n\n    if (config.method === httpMethod.POST || config.method === httpMethod.PUT) {\n      config.headers[header.XSRF_TOKEN] = this.props.cookies.get('XSRF-TOKEN');\n      config.credentials = 'include';\n    }\n    return [url, config];\n  }\n\n  onRequestErrorIntercepted(error) {\n    return error;\n  }\n\n  onResponseIntercepted(response) {\n    if (response.status === httpStatus.UNAUTHORIZED && !this.state.tokenRefreshed) {\n      this.props.keycloak\n        .updateToken(tokenMinValidity)\n        .success((res) => this.onTokenRefresh())\n        .error((error) => this.onTokenRefreshError());\n    } else if (response.status === httpStatus.UNAUTHORIZED && this.state.tokenRefreshed) {\n      this.onTokenRefreshError();\n    } else if (this.state.tokenRefreshed) {\n      this.setState({ tokenRefreshed: false });\n    }\n    return response;\n  }\n\n  onResponseErrorIntercepted(error) {\n    return error;\n  }\n\n  onTokenRefresh() {\n    this.setState({ tokenRefreshed: true });\n    apiController.request();\n  }\n\n  onTokenRefreshError() {\n    apiController.unregisterRequest();\n    this.setState({ tokenRefreshed: false });\n    this.props.deleteKeycloak();\n  }\n\n  render() {\n    return (\n      <div>\n        {this.props.children}\n      </div>\n    );\n  }\n}\n\nAuthenticationProvider.propTypes = propTypes;\nAuthenticationProvider.defaultProps = defaultProps;\n\nexport default withCookies(AuthenticationProvider);\n","import { connect } from 'react-redux';\nimport { deleteKeycloak, setKeycloak } from '../../../actions';\nimport AuthorizationProvider from './AuthenticationProvider';\n\nconst mapStateToProps = (state) => ({\n  keycloak: state.keycloak,\n  authenticated: state.keycloak !== null,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  setKeycloak: (keycloak) => dispatch(setKeycloak(keycloak)),\n  deleteKeycloak: () => dispatch(deleteKeycloak()),\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(AuthorizationProvider);\n","import AuthorizationProviderContainer from './AuthenticationProviderContainer';\n\nexport default AuthorizationProviderContainer;\n"],"sourceRoot":""}